organizations:
  - name: org1
#! For smoke test suite, connection-profile are read from smoke directory
    connProfilePath: ./connection-profile/connection_profile_org1.yaml
  - name: org2
    connProfilePath: ./connection-profile/connection_profile_org2.yaml

createChannel:
  - channelPrefix: testorgschannel
    numChannels: 1
#! For smoke test suite, channel-artifacts are read from smoke directory
    channelTxPath: ./channel-artifacts/
    organizations: org1

anchorPeerUpdate:
  - channelName: testorgschannel0
    organizations: org1
#! For smoke test suite, channel-artifacts are read from smoke directory
    anchorPeerUpdateTxPath: ./channel-artifacts/testorgschannel0org1anchor.tx
  - channelName: testorgschannel0
    organizations: org2
    anchorPeerUpdateTxPath: ./channel-artifacts/testorgschannel0org2anchor.tx

joinChannel:
# joins all peers in listed organziations to all channels based on channelPrefix and numChannels
  - channelPrefix: testorgschannel
    numChannels: 1
    organizations: org1,org2

installChaincode:
# installs chaincode with specified name on all peers in listed organziations
  - name: samplecc
    sdk: cli
    version: v1
    path: github.com/hyperledger/fabric-test/chaincodes/samplecc/go
    organizations: org1,org2
    targetPeers: peer0-org1,peer0-org2
    language: golang
    metadataPath: ""

  - name: samplecc
    sdk: cli
    version: v2
    path: github.com/hyperledger/fabric-test/chaincodes/samplecc/go
    organizations: org1,org2
    targetPeers: peer0-org1,peer0-org2
    language: golang
    metadataPath: ""

instantiateChaincode:
  - channelName: testorgschannel0
    sdk: cli
    name: samplecc
    version: v1
    sequence: 1
    args: ""
    organizations: org1,org2
    targetPeers: peer0-org1,peer0-org2
    endorsementPolicy: 2of(org1,org2)
    collectionPath: ""

upgradeChaincode:
  - channelName: testorgschannel0
    sdk: cli
    name: samplecc
    version: v2
    sequence: 2
    args: ""
    organizations: org1,org2
    targetPeers: peer0-org1,peer0-org2
    endorsementPolicy: 1of(org1,org2)
    collectionPath: ""

invokes:
  - channelName: testorgschannel0
    name: samplecc
    targetPeers: AllPeers
    nProcPerOrg: 2
    nRequest: 10
    runDur: 0
    organizations: org1,org2
    txnOpt:
      - mode: constant
        options:
          constFreq: 0
          devFreq: 0
    queryCheck: 100
    eventOpt:
      type: FilteredBlock
      listener:  Block
      timeout: 240000
    ccOpt:
      ccType: ccchecker
      keyStart: 0
      keyIdx: [1]
      keyPayload: [2]
      payLoadMin: 1024
      payLoadMax: 2048
    args: "put,a1,1"

queries:
  - channelName: testorgschannel0
    name: samplecc
    targetPeers: OrgAnchor
    nProcPerOrg: 2
    nRequest: 10
    runDur: 0
    organizations: org1,org2
    ccOpt:
      ccType: ccchecker
      keyStart: 0
      keyIdx: [1]
    txnOpt:
      - mode: constant
        options:
          constFreq: 0
          devFreq: 0
    args: "get,a1"

command:
  - name: curl
    args:
      - -H 
      - 'Content-Type: application/json'
      - -X
      - PUT
      - -d
      - '{"spec":"info"}'
      - http://127.0.0.1:31100/logspec
    
  - name: docker
    args:
      - logs
      - peer0-org1