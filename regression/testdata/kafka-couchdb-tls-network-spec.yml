#! Copyright IBM Corp. All Rights Reserved.
#!
#! SPDX-License-Identifier: Apache-2.0
---
#! fabricVersion:
#! Released images are pulled from docker hub hyperledger/, e.g. 1.4.5
#! Development stream images are pulled from
#! hyperledger-fabric.jfrog.io/, e.g. 1.4.5-stable
fabricVersion: 1.4-stable
#! peer database ledger type (couchdb, goleveldb)
dbType: couchdb
#! This parameter is used to define fabric logging spec in peers
peerFabricLoggingSpec: info
#! This parameter is used to define fabric logging spec in orderers
ordererFabricLoggingSpec: info
#! tls in the network (true, false or mutual (for mutualtls))
tls: true
#! fabric metrics with prometheus (true/false)
metrics: true
#! true - enable gossip and dynamic leader election
#! false - disable gossip and set all peers as org leaders
gossipEnable: false
#! enable node ou's in fabric network (true/false)
enableNodeOUs: true

#! Location where crypto-config, connection-profiles, channel-artifacts are stored
artifactsLocation: .

#! Orderer Config Settings
orderer:
#! Consensus type
  ordererType: kafka
  batchSize:
    maxMessageCount: 100
    absoluteMaxBytes: 99 MB
    preferredMaxBytes: 10 MB
  batchTimeOut: 2s
#! Etcd raft options and this will be used when ordererType is
#! selected as etcdraft
  etcdraftOptions:
    tickInterval: 500ms
    electionTick: 10
    heartbeatTick: 1
    maxInflightBlocks: 5
    snapshotIntervalSize: 100 MB

#! Number of kafka and zookeeper to be launched in network
#! when ordererType is kafka
kafka:
  numKafka: 5
  #! number of kafka replications for each channel
  numKafkaReplications: 3
  numZookeepers: 3

ordererOrganizations:
- name: ordererorg1
  mspId: OrdererOrg1
  numOderers: 3
  numCa: 1

peerOrganizations:
- name: org1
  mspId: PeerOrg1
  numPeers: 2
  numCa: 1

- name: org2
  mspId: PeerOrg2
  numPeers: 2
  numCa: 1

- name: org3
  mspId: PeerOrg3
  numPeers: 2
  numCa: 1

- name: org4
  mspId: PeerOrg4
  numPeers: 2
  numCa: 1

#! Capabilites for Orderer, Channel, Application groups
ordererCapabilities:
  V1_4_2: true

channelCapabilities:
  V1_4_3: true

applicationCapabilities:
  V1_4_2: true

#! Create the channel creation transactions; every org will be included in every channel
#! This used testorgschannel as the prefix and channels are used like testorgschannel0,
#! testorgschannel1.... based on number of channels passed
#! (note: client will need to submit the transactions to create channels)
numChannels: 5

k8s:
  serviceType: NodePort
  #! dataPersistence is used to store the data from fabric containers
  #! It can take values of true, false and local
  #! When true is used, it uses storageClass and storageCapacity to create
  #! persistent volumes. When false is used, backup will not be configured.
  #! When local is used, hostPath will be used to store the data from fabric containers
  #! to worker nodes on which pods are running.
  dataPersistence: true
  storageClass: ibmc-file-gold
  storageCapacity: 20Gi

  resources:
    orderers:
      limits:
         cpu: "1"
         memory: 2Gi
      requests:
         cpu: "1"
         memory: 2Gi
    peers:
      limits:
         cpu: "1"
         memory: 4Gi
      requests:
         cpu: "1"
         memory: 2Gi
#! dind will be used to run all chaincode containers of a peer
    dind:
      limits:
         cpu: "2"
         memory: 4Gi
      requests:
         cpu: "2"
         memory: 4Gi
    couchdb:
      limits:
         cpu: "1"
         memory: 2Gi
      requests:
         cpu: "1"
         memory: 2Gi
    kafka:
      limits:
         cpu: "2"
         memory: 4Gi
      requests:
         cpu: "2"
         memory: 4Gi

#!#! TODO: future enhancement to read individual profiles for each channel creation.
#!profiles:
#!- name: TwoOrgsOrdererGenesis
#!  orderers:
#!    - orderer0
#!- name: TwoOrgsChannelProfile
#!  consortium: SampleConsortium
#!  organizations:
#!    - org1
#!    - org2
#!- name: AnotherChannelProfile
#!  consortium: SampleConsortium
#!  organizations:
#!    - org3
#!    - org4
