#! Copyright IBM Corp. All Rights Reserved.
#!
#! SPDX-License-Identifier: Apache-2.0

#@ load("@ytt:data", "data")
#@ services = {}

#@ def caList(config):
#@   caUniquePort = 32000
#@   for i in range(0, len(config.peer_organizations)):
#@     org = config.peer_organizations[i]
#@     for j in range(0, org.num_ca):
#@       container_name = "ca{}-{}".format(j, org.name)
#@       services[container_name] = ca(container_name, caUniquePort, "peer", org.name, config)
#@       caUniquePort += 1
#@     end
#@   end
#@   for i in range(0, len(config.orderer_organizations)):
#@     org = config.orderer_organizations[i]
#@     for j in range(0, org.num_ca):
#@       container_name = "ca{}-{}".format(j, org.name)
#@       services[container_name] = ca(container_name, caUniquePort, "orderer", org.name, config)
#@       caUniquePort += 1
#@     end
#@   end
#@ end

#@ def couchDB(config):
#@   couchDBUniquePort = 33000
#@   for i in range(0, len(config.peer_organizations)):
#@     org = config.peer_organizations[i]
#@     for j in range(0, org.num_peers):
#@       container_name = "couchdb-peer{}-{}".format(j, org.name)
#@       services[container_name] = {"container_name":container_name, "image":"hyperledger/fabric-couchdb", "ports":["{}:5984".format(couchDBUniquePort)]}   
#@       couchDBUniquePort += 1
#@     end
#@   end
#@ end

#@ def ca(container_name, caUniquePort, type, orgName, config):
#@   orgType = "{}Organizations".format(type)
#@   image = "hyperledger/fabric-ca:{}".format(config.fabric_version)
#@   if config.fabric_version.endswith("-stable"):
#@     image="nexus3.hyperledger.org:10001/hyperledger/fabric-ca:amd64-{}".format(config.fabric_version)
#@   end
#@   env = ["FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server"]
#@   env.append("FABRIC_CA_SERVER_CA_NAME={}".format(container_name))
#@   env.append("FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca/ca.{}-cert.pem".format(orgName))
#@   env.append("FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/ca/ca-priv_sk")
#@   if config.tls == "mutual":
#@     env.append("FABRIC_CA_SERVER_TLS_ENABLED=true")
#@   else:
#@     env.append("FABRIC_CA_SERVER_TLS_ENABLED={}".format(config.tls))
#@   end
#@   env.append("FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/tlsca/tlsca.{}-cert.pem".format(orgName))
#@   env.append("FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/tlsca/tlsca-priv_sk")
#@   ports = ["{}:{}".format(caUniquePort, 7054)]
#@   command = "sh -c 'fabric-ca-server start -b admin:adminpw -d'"
#@   volumes = ["{}crypto-config/{}/{}/ca/:/etc/hyperledger/fabric-ca-server-config/ca".format(artifacts_location, orgType, orgName)]
#@   volumes.append("{}crypto-config/{}/{}/tlsca/:/etc/hyperledger/fabric-ca-server-config/tlsca".format(artifacts_location, orgType, orgName))
#@   ca = {"image":image, "environment":env, "ports":ports, "command":command, "volumes":volumes, "container_name":container_name}
#@   return ca
#@ end

#@ def kafka_zookeepers(kafka):
#@   (zookeepers, kafka_zookeeper_connect) = ([], [])
#@   kafkaUniquePort = 2181
#@   for i in range(0, kafka.num_zookeepers):
#@     env = ["ZOO_MY_ID={}".format(i+1), "ZOO_PORT={}".format(kafkaUniquePort), "ZOO_SERVERS={}".format(zookeeper_servers(kafka.num_zookeepers))]
#@     expose = [kafkaUniquePort, kafkaUniquePort+1, kafkaUniquePort+2]
#@     container_name = "zookeeper{}".format(i)
#@     zookeepers.append(container_name)
#@     kafka_zookeeper_connect.append("{}:{}".format(container_name, kafkaUniquePort))
#@     services[container_name] = {"image":"hyperledger/fabric-zookeeper", "environment":env, "expose":expose, "container_name":container_name}
#@     kafkaUniquePort += 1000
#@   end
#@   kafkaUniquePort = 9092
#@   for i in range(0, kafka.num_kafka):
#@     container_name = "kafka{}".format(i)
#@     env = ["KAFKA_BROKER_ID={}".format(i), "KAFKA_DEFAULT_REPLICATION_FACTOR={}".format(kafka.num_kafka_replications), "KAFKA_MESSAGE_MAX_BYTES=103809024", "KAFKA_REPLICA_FETCH_MAX_BYTES=103809024"]
#@     env.append("KAFKA_ZOOKEEPER_CONNECT={}".format(",".join(kafka_zookeeper_connect)))
#@     env.append("KAFKA_MIN_INSYNC_REPLICAS=2")
#@     env.append("KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false")
#@     services[container_name] = {"image":"hyperledger/fabric-kafka", "environment":env, "depends_on":zookeepers, "container_name":container_name, "ports":["{}:{}".format(kafkaUniquePort+i,kafkaUniquePort)]}
#@   end
#@ end

#@ def zookeeper_servers(num_zookeepers):
#@   servers = []
#@   zookeeperUniquePort = 2181
#@   for i in range(0, num_zookeepers):
#@     servers.append("server.{}=zookeeper{}:{}:{}:participant".format(i+1, i, zookeeperUniquePort+1, zookeeperUniquePort+2))
#@     zookeeperUniquePort += 1000
#@   end
#@   return " ".join(servers)
#@ end

#@ def kafkaList(num_kafka):
#@   kafka_list = []
#@   for i in range(0, num_kafka):
#@     kafka_list.append("kafka{}".format(i))
#@   end
#@   return kafka_list
#@ end

#@ def mutualTLS(config):
#@   output = []
#@     for i in range(0, len(config.peer_organizations)):
#@       organization = config.peer_organizations[i]
#@       output.append("/etc/hyperledger/fabric/artifacts/msp/crypto-config/peerOrganizations/{}/ca/ca.{}-cert.pem".format(organization.name, organization.name))
#@     end
#@     for j in range(0, len(config.orderer_organizations)):
#@       organization = config.orderer_organizations[j]
#@       output.append("/etc/hyperledger/fabric/artifacts/msp/crypto-config/ordererOrganizations/{}/ca/ca.{}-cert.pem".format(organization.name, organization.name))
#@     end
#@   return output
#@ end

#@ def orderers(config):
#@   (ordererUniquerPort, ordererHealthCheckPort) = (30000, 30100)
#@   for i in range(0, len(config.orderer_organizations)):
#@     org = config.orderer_organizations[i]
#@     for j in range(0, org.num_orderers):
#@       env = ["FABRIC_LOGGING_SPEC={}".format(config.orderer_fabric_logging_spec), "ORDERER_GENERAL_LISTENADDRESS=0.0.0.0", "ORDERER_GENERAL_LISTENPORT={}".format(ordererUniquerPort), "ORDERER_GENERAL_GENESISMETHOD=file"]
#@       env.append("ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/fabric/artifacts/msp/channel-artifacts/genesis.block")
#@       env.append("ORDERER_GENERAL_LOCALMSPID={}".format(org.msp_id))
#@       env.append("ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/fabric/artifacts/msp/crypto-config/ordererOrganizations/{}/orderers/orderer{}-{}.{}/msp".format(org.name, j, org.name, org.name))
#@       if config.tls == "mutual":
#@         env.append("ORDERER_GENERAL_TLS_CLIENTROOTCAS=[{}]".format(", ".join(mutualTLS(config))))
#@         env.append("ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED=true")
#@         env.append("ORDERER_GENERAL_TLS_ENABLED=true")
#@       else:
#@         env.append("ORDERER_GENERAL_TLS_ENABLED={}".format(config.tls))
#@       end
#@       env.append("ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443")
#@       env.append("ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/fabric/artifacts/msp/crypto-config/ordererOrganizations/{}/orderers/orderer{}-{}.{}/tls/server.key".format(org.name, j, org.name, org.name))
#@       env.append("ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/fabric/artifacts/msp/crypto-config/ordererOrganizations/{}/orderers/orderer{}-{}.{}/tls/server.crt".format(org.name, j, org.name, org.name))
#@       env.append("ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/fabric/artifacts/msp/crypto-config/ordererOrganizations/{}/orderers/orderer{}-{}.{}/tls/server.crt]".format(org.name, j, org.name, org.name))
#@       env.append("ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/fabric/artifacts/msp/crypto-config/ordererOrganizations/{}/orderers/orderer{}-{}.{}/tls/server.key".format(org.name, j, org.name, org.name))
#@       env.append("ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/fabric/artifacts/msp/crypto-config/ordererOrganizations/{}/orderers/orderer{}-{}.{}/tls/server.crt".format(org.name, j, org.name, org.name))
#@       volumes = ["{}:/etc/hyperledger/fabric/artifacts/msp/".format(artifacts_location)]
#!       volumes.append("orderer{}-{}:/var/hyperledger/production/orderer".format(j, org.name))
#@       volumes.append("./backup/orderer{}-{}:/var/hyperledger/production/orderer".format(j, org.name))
#@       container_name = "orderer{}-{}".format(j,org.name)
#@       image = "hyperledger/fabric-orderer:{}".format(config.fabric_version)
#@       if config.fabric_version.endswith("-stable"):
#@         image="nexus3.hyperledger.org:10001/hyperledger/fabric-orderer:amd64-{}".format(config.fabric_version)
#@       end
#@       ports = ["{}:{}".format(ordererUniquerPort,ordererUniquerPort), "{}:{}".format(ordererHealthCheckPort,8443)]
#@       services[container_name] = {"image":image, "environment":env, "working_dir":"/opt/gopath/src/github.com/hyperledger/fabric", "command":"orderer", "volumes":volumes, "ports":ports, "container_name":container_name}
#@       if config.orderer.orderertype == "kafka":
#@         services[container_name] = {"image":image, "environment":env, "working_dir":"/opt/gopath/src/github.com/hyperledger/fabric", "command":"orderer", "volumes":volumes, "ports":ports, "container_name":container_name, "depends_on":kafkaList(config.kafka.num_kafka)}
#@       end
#@       ordererUniquerPort += 1
#@       ordererHealthCheckPort += 1
#@     end
#@   end
#@ end

#@ def peers(config):
#@   (peerUniquerPort, peerHealthCheckPort) = (31000, 31100)
#@   for i in range(0, len(config.peer_organizations)):
#@     org = config.peer_organizations[i]
#@     for j in range(0, org.num_peers):
#@       env = ["CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock", "FABRIC_LOGGING_SPEC={}".format(config.peer_fabric_logging_spec), "CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=configfiles_default"]
#@       if config.gossip_enable == True:
#@         env.append("CORE_PEER_GOSSIP_STATE_ENABLED=true")
#@         env.append("CORE_PEER_GOSSIP_ORGLEADER=false")
#@         env.append("CORE_PEER_GOSSIP_USELEADERELECTION=true")
#@       else:
#@         env.append("CORE_PEER_GOSSIP_STATE_ENABLED=false")
#@         env.append("CORE_PEER_GOSSIP_ORGLEADER=true")
#@         env.append("CORE_PEER_GOSSIP_USELEADERELECTION=false")
#@       end
#@       env.append("CORE_PEER_GOSSIP_ENDPOINT=peer{}-{}:{}".format(j, org.name, peerUniquerPort))
#@       env.append("CORE_PEER_LISTENADDRESS=0.0.0.0:{}".format(peerUniquerPort))
#@       env.append("CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:{}".format(7052))
#@       env.append("CORE_CHAINCODE_EXECUTETIMEOUT=1500s")
#@       env.append("CORE_PEER_ID=peer{}-{}".format(j, org.name))
#@       env.append("CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/artifacts/msp/crypto-config/peerOrganizations/{}/peers/peer{}-{}.{}/msp".format(org.name, j, org.name, org.name))
#@       env.append("CORE_PEER_LOCALMSPID={}".format(org.msp_id))
#@       env.append("CORE_PEER_ADDRESS=peer{}-{}:{}".format(j, org.name, peerUniquerPort))
#@       env.append("CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9443")
#@       env.append("CORE_PEER_CHAINCODEADDRESS=peer{}-{}:{}".format(j, org.name, 7052))
#@       env.append("CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer{}-{}:{}".format(j, org.name, peerUniquerPort))
#@       if config.tls == "mutual":
#@         env.append("CORE_PEER_TLS_CLIENTROOTCAS_FILES={}".format(" ".join(mutualTLS(config))))
#@         env.append("CORE_PEER_TLS_CLIENTAUTHREQUIRED=true")
#@         env.append("CORE_PEER_TLS_ENABLED=true")
#@       else:
#@         env.append("CORE_PEER_TLS_ENABLED={}".format(config.tls))
#@       end
#@       env.append("CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/artifacts/msp/crypto-config/peerOrganizations/{}/peers/peer{}-{}.{}/tls/server.crt".format(org.name, j, org.name, org.name))
#@       env.append("CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/artifacts/msp/crypto-config/peerOrganizations/{}/peers/peer{}-{}.{}/tls/server.key".format(org.name, j, org.name, org.name))
#@       env.append("CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/artifacts/msp/crypto-config/peerOrganizations/{}/peers/peer{}-{}.{}/tls/ca.crt".format(org.name, j, org.name, org.name))
#@       container_name = "peer{}-{}".format(j, org.name)
#@       volumes = ["{}:/etc/hyperledger/fabric/artifacts/msp/".format(artifacts_location)]
#@       volumes.append("/var/run/:/host/var/run/")
#!       volumes.append("peer{}-{}:/var/hyperledger/production".format(j, org.name))
#@       volumes.append("./backup/peer{}-{}:/var/hyperledger/production".format(j, org.name))
#@       image = "hyperledger/fabric-peer:{}".format(config.fabric_version)
#@       if config.fabric_version.endswith("-stable"):
#@         env.append("CORE_CHAINCODE_BUILDER=nexus3.hyperledger.org:10001/hyperledger/fabric-ccenv:amd64-{}".format(config.fabric_version))
#@         env.append("CORE_CHAINCODE_GOLANG_RUNTIME=nexus3.hyperledger.org:10001/hyperledger/fabric-baseos:amd64-{}".format(config.fabric_version))
#@         env.append("CORE_CHAINCODE_JAVA_RUNTIME=nexus3.hyperledger.org:10001/hyperledger/fabric-javaenv:amd64-{}".format(config.fabric_version))
#@         env.append("CORE_CHAINCODE_NODE_RUNTIME=nexus3.hyperledger.org:10001/hyperledger/fabric-nodeenv:amd64-{}".format(config.fabric_version))
#@         image="nexus3.hyperledger.org:10001/hyperledger/fabric-peer:amd64-{}".format(config.fabric_version)
#@       end
#@       ports = ["7051", "{}:{}".format(peerUniquerPort,peerUniquerPort), "{}:{}".format(peerHealthCheckPort,9443)]
#@       services[container_name] = {"image":image, "environment":env, "volumes":volumes, "ports":ports, "working_dir":"/opt/gopath/src/github.com/hyperledger/fabric/peer", "command":"peer node start", "container_name":container_name}
#@       if config.db_type == "couchdb":
#@         env.append("CORE_LEDGER_STATE_STATEDATABASE=CouchDB")
#@         env.append("CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb-{}:5984".format(container_name))
#@         services[container_name] = {"image":image, "environment":env, "volumes":volumes, "ports":ports, "working_dir":"/opt/gopath/src/github.com/hyperledger/fabric/peer", "command":"peer node start", "container_name":container_name, "depends_on":["couchdb-{}".format(container_name)]}
#@       end
#@       peerUniquerPort += 1
#@       peerHealthCheckPort += 1
#@     end
#@   end
#@ end

#@ def volumes(config):
#@   volumes = {}
#@   for i in range(0, len(config.peer_organizations)):
#@     org = config.peer_organizations[i]
#@     for j in range(0, org.num_peers):
#@        volumes["peer{}-{}".format(j, org.name)] = {}
#@     end
#@   end
#@   for k in range(0, len(config.orderer_organizations)):
#@     org = config.orderer_organizations[k]
#@     for l in range(0, org.num_orderers):
#@        volumes["orderer{}-{}".format(l, org.name)] = {}
#@     end
#@   end
#@   return volumes
#@ end

#@ config = data.values
#@ artifacts_location = config.artifacts_location
#@ if artifacts_location.endswith("/") == False:
#@   artifacts_location = artifacts_location + "/"
#@ end
version: '2'
#! volumes: #@ volumes(config)
#@ caList(config)
#@ if config.orderer.orderertype == "kafka":
#@   kafka_zookeepers(config.kafka)
#@ end
#@ if config.db_type == "couchdb":
#@   couchDB(config)
#@ end
#@ peers(config)
#@ orderers(config)
services: #@ services